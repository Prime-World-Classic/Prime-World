#include "stdafx.h"
#include "Console.h"

#include "ScreenCommands.h"
#include "DebugTextDraw.h"
#include "NivalInput/Binds.h"
#include "UI/Root.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace NMainLoop
{

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Console::CreateScreen()
{
  Console * pScreen = new Console();

  NScreenCommands::PushCommand( NScreenCommands::CreatePushScreenCommand( pScreen ) );
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Console::Console() : inited(false), consoleActive(false)
{
  eventsUI.AddActivationHandler( "show_hide_console", &Console::OpenClose );
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Console::~Console()
{
  Input::Binds* binds = Input::BindsManager::Instance()->GetBinds();
  if(binds)
    binds->DeactivateSection( "console_screen" );
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Console::Init( UI::User * uiUser )
{
  Input::Binds* binds = Input::BindsManager::Instance()->GetBinds();
  if(binds)
    binds->ActivateSection( "console_screen" );

	logic = new UI::ConsoleLogic;
  SetLogic( logic );
  logic->SetUser( uiUser );
	logic->LoadScreenLayout( "Console" );

	consoleActive = false;
	logic->Show( consoleActive );

  debugTextDraw = new DebugTextDraw;
  debugTextDraw->Init();

	inited = true;
	return true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Console::Step( bool bAppActive )
{
  DefaultScreenBase::Step(bAppActive);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Console::Draw( bool bAppActive )
{
  if ( debugTextDraw )
    debugTextDraw->Draw();

  NMainLoop::DefaultScreenBase::Draw( bAppActive );

  if ( logic )
    logic->DrawText();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Console::ProcessUIEvent( const Input::Event & message )
{
  //Special case, we _always_ want all input to catch "~"
  if ( eventsUI.ProcessEvent( message, this ) )
		return true;

	if ( !consoleActive )
		return false;

	return logic->ProcessMessage( message );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Console::IsModal() const 
{ 
	return consoleActive;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Console::OpenClose()
{
#ifndef _SHIPPING
  consoleActive = !consoleActive;
  logic->Show( consoleActive );
  return true;
#else
  return false;
#endif

  /*
#ifndef _SHIPPING
	consoleActive = !consoleActive;
	logic->Show( consoleActive );
	return true;
#else
	return false;
#endif
  */
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NI_DEFINE_REFCOUNT( NMainLoop::Console );
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
